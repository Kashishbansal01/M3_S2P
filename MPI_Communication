#include <mpi.h>
#include <iostream>
#include <cstring>

using namespace std;

int main(int argc, char** argv) {
    int rank, size;
    char message[13] = "Hello World!";
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        // Master process
        for (int i = 1; i < size; i++) {
            MPI_Send(message, 13, MPI_CHAR, i, 0, MPI_COMM_WORLD);
        }
    } else {
        // Worker process
        MPI_Recv(message, 13, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        cout << "Rank " << rank << " received message: " << message << endl;
    }

    MPI_Barrier(MPI_COMM_WORLD); // Ensure all processes have completed sending/receiving

    if (rank == 0) {
        // Master process
        MPI_Bcast(message, 13, MPI_CHAR, 0, MPI_COMM_WORLD);
    } else {
        // Worker process
        MPI_Bcast(message, 13, MPI_CHAR, 0, MPI_COMM_WORLD);
        cout << "Rank " << rank << " received broadcast message: " << message << endl;
    }

    MPI_Finalize();
    return 0;
}
